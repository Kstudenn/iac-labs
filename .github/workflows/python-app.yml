# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix: 
        os: [ "ubuntu-latest", "windows-latest" ]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - run: |
          source $VENV
          pytest --version
      
  lint:    
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]   
    runs-on: ${{ matrix.os }}
      
    defaults:
      run:
        working-directory: ./example-app
      
    needs: build
     
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
      with:
        virtualenvs-create: true
        virtualenvs-in-project: false
        installer-parallel: true 
        
    #- name: poetry lint
    #  run: |
    #    source $VENV
    #    poetry run task lint
    - run: |
      if: runner.os == 'Windows'
        source .venv/scripts/activate
        pytest --version
    - run: |
      if: runner.os != 'Windows'
        source .venv/bin/activate
        pytest --version

