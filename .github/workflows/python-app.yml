# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        working-directory: ./example-app
        
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Install Poetry Action
  # You may pin to the exact commit or the version.
  # uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b
      uses: snok/install-poetry@v1.3.4
      with:
    # The Poetry version to install
        virtualenvs-create: true
        virtualenvs-in-project: false
        installer-parallel: true
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv
        key: ${{ runner.os }}-venv
          

  security:
      needs: build
      runs-on: ${{ matrix.os }}
      concurrency:
        group: concurrency-group
      steps:
        - name: Use cached build venv
          uses: actions/cache@v3
          with:
            path: /home/runner/.cache/pypoetry/virtualenvs
            key: ${{ runner.os }}-venv
            restore-keys: |
              ${{ runner.os }}-venv
        - name: Run step
          run: |
            poetry run task security

  lint:
      needs: build
      runs-on: ${{ matrix.os }}
      concurrency:
        group: concurrency-group
      steps:
        - name: Use cached build venv
          uses: actions/cache@v3
          with:
            path: /home/runner/.cache/pypoetry/virtualenvs
            key: ${{ runner.os }}-venv
            restore-keys: |
              ${{ runner.os }}-venv
        - name: Run step
          run: |
            poetry run task lint

  formatter:
      needs: build
      runs-on: ${{ matrix.os }}
      concurrency:
        group: concurrency-group
      steps:
        - name: Use cached build venv
          uses: actions/cache@v3
          with:
            path: /home/runner/.cache/pypoetry/virtualenvs
            key: ${{ runner.os }}-venv
            restore-keys: |
              ${{ runner.os }}-venv
        - name: Run step
          run: |
            poetry run task formatter

  test:
      needs: 
        - build
        - formatter
        - lint
        - security
      runs-on: ${{ matrix.os }}
      steps:
        - name: Use cached build venv
          uses: actions/cache@v3
          with:
            path: /home/runner/.cache/pypoetry/virtualenvs
            key: ${{ runner.os }}-venv
            restore-keys: |
              ${{ runner.os }}-venv
        - name: Run step
          run: |
            poetry run task test



